/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var ee=Object.defineProperty;var Ve=Object.getOwnPropertyDescriptor;var Ue=Object.getOwnPropertyNames;var Ye=Object.prototype.hasOwnProperty;var Be=(a,e)=>{for(var t in e)ee(a,t,{get:e[t],enumerable:!0})},Ke=(a,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of Ue(e))!Ye.call(a,n)&&n!==t&&ee(a,n,{get:()=>e[n],enumerable:!(r=Ve(e,n))||r.enumerable});return a};var We=a=>Ke(ee({},"__esModule",{value:!0}),a);var ze={};Be(ze,{default:()=>Q});module.exports=We(ze);var E=require("obsidian");var F=require("obsidian");var T="ollama",u="openai",ae="add-comment-block",oe="add-hr",ie="call-chatgpt-api",le="stop-streaming",ce="move-to-chat",me="infer-title",he="choose-chat-template",de="clear-chat",ge=`I am sorry. There was an authorization issue with the external API (Status 401).
Please check your API key in the settings`,pe=`I am sorry. There was an issue reaching the network.
Please check your network connection.`,ue="I am sorry, your request looks wrong. Please check your URL or model name in the settings or frontmatter.",H="I am sorry, I could not answer your request because of an error, here is what went wrong:",te="chatFolder",fe="chatTemplateFolder",m=`

`,w=/---[\s\S]*?---/g,Ee=/\[\[([^\][]+)\]\]/g,Ce=/\[([^\]]+)\]\(([^()]+)\)/g,Te=`=begin-chatgpt-md-comment${m}`,Me="=end-chatgpt-md-comment",Ae=0,re=6,_e=4,D="YYYYMMDDhhmmss",Se="Failed to fetch",ne="__chatgpt_plugin",R=`<hr class="${ne}">`,M="role::",I="assistant",V="developer",we="system",g="user";var U=a=>{let t=(a.match(/```/g)||[]).length%2!==0;return t&&console.log("[ChatGPT MD] Unclosed code block detected"),t},je=a=>{let e=a.trim().toLowerCase(),r=[g,I,V].find(n=>e.includes(n));if(r)return r;throw new Error(`Failed to extract role from input: "${a}"`)},Ie=a=>{try{if(!a.includes(M))return{role:g,content:a};let[e,...t]=a.split(M)[1].split(`
`);return{role:je(e),content:t.join(`
`).trim()}}catch(e){throw new Error(`Failed to extract role and message: ${e}`)}},Oe=a=>{try{let e=/=begin-chatgpt-md-comment[\s\S]*?=end-chatgpt-md-comment/g;return a.replace(e,"")}catch(e){throw new Error("Error removing comments from messages"+e)}},Je=a=>{let e=a.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&").replace("YYYY","\\d{4}").replace("MM","\\d{2}").replace("DD","\\d{2}").replace("hh","\\d{2}").replace("mm","\\d{2}").replace("ss","\\d{2}");return new RegExp(`^${e}$`)},ye=(a="",e)=>(a==null?void 0:a.length)==e.length&&Je(e).test(a),se=a=>a===0?"":a>6?"#".repeat(6)+" ":"#".repeat(a)+" ",x=(a,e,t)=>`${m}${R}${m}${a}${M}${e}${t?`<span style="font-size: small;"> (${t})</span>`:""}${m}`,Pe=a=>{let t=a.replace(/^---\n/,"").replace(/\n---$/,"").split(`
`),r={};for(let n of t){if(!n.trim())continue;let[s,...o]=n.split(":"),i=o.join(":").trim();i.startsWith("[")&&i.endsWith("]")?r[s.trim()]=i.slice(1,-1).split(",").map(l=>{let c=l.trim();return c.startsWith("'")&&c.endsWith("'")?c.slice(1,-1):c}):i==="true"?r[s.trim()]=!0:i==="false"?r[s.trim()]=!1:i==="null"?r[s.trim()]=null:isNaN(Number(i))?r[s.trim()]=i:r[s.trim()]=Number(i)}return r},Ne=a=>a.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),De=a=>a?a.split(R):[],xe=a=>(a=a&&a.replace(w,"").trim(),a);var Y=class{constructor(){this.abortController=null;this.stopStreaming=()=>{if(F.Platform.isMobile){new F.Notice("[ChatGPT MD] Mobile not supported.");return}this.abortController&&(this.abortController.abort(),console.log("[ChatGPT MD] Stream aborted"),this.abortController=null)}}handleEditorTextUpdate(e,t,r){let n=e.posToOffset(r),s=e.cm;s.dispatch(s.state.update({changes:{from:n,to:n,insert:t}}));let o={line:r.line,ch:r.ch+t.length};return e.setCursor(o),o}insertAssistantHeader(e,t,r){let n=x(t,I,r);e.replaceRange(n,e.getCursor());let s=e.getCursor(),o={line:s.line,ch:s.ch+n.length};return e.setCursor(o),o}finalizeText(e,t,r,n){let s=U(t)?t+"\n```":t,o=e.getCursor();e.replaceRange(s,{line:r.line,ch:r.ch},o);let i={line:r.line,ch:r.ch+s.length};return e.setCursor(i),n?new F.Notice("[ChatGPT MD] Text pasted at cursor may leave artifacts. Please remove them manually. ChatGPT MD cannot safely remove text when pasting at cursor."):e.replaceRange("",i,{line:1/0,ch:1/0}),s}async stream(e,t,r,n,s,o,i){let l="",c;try{console.log('[ChatGPT MD] "stream"',r),c=this.insertAssistantHeader(e,i,r.model),this.abortController=new AbortController;let h=await fetch(t,{headers:n,method:"POST",body:JSON.stringify(r),signal:this.abortController.signal});if(h.status==401)return this.finalizeText(e,ge,c,o);if(h.status==404)return this.finalizeText(e,`${ue}:${m}Model: ${r.model}${m}URL: ${t}`,c,o);if(!h.ok)throw new Error("Network response was not ok");if(!h.body)throw new Error("The response was empty");let O=h.body.getReader(),y=new TextDecoder;for(;;){let{done:P,value:G}=await O.read();if(P)break;let ke=y.decode(G,{stream:!0}).split(`
`);for(let k of ke)if(k.trim()){if(s==u){if(!k.startsWith("data: "))continue;let S=k.slice(6);if(S==="[DONE]")return this.finalizeText(e,l,c,o);try{let v=JSON.parse(S).choices[0].delta.content;if(v){let He=e.getCursor();this.handleEditorTextUpdate(e,v,He),l+=v}}catch(N){console.error("Error parsing OpenAI JSON:",N)}}else if(s==T)try{let S=JSON.parse(k);if(S.done)return this.finalizeText(e,l,c,o);{let N=S.message.content;if(N){let v=e.getCursor();this.handleEditorTextUpdate(e,N,v),l+=N}}}catch(S){console.error("Error parsing Ollama JSON:",S)}}}return l}catch(h){return h.name==="AbortError"?(console.log("[ChatGPT MD] Stream aborted"),this.finalizeText(e,"Stream aborted",c,o)):h.message==Se?this.finalizeText(e,pe,c,o):(console.error("Stream error:",h),this.finalizeText(e,`${H}${m}${h}`,c,o))}finally{this.abortController=null}}};var p=require("obsidian");var f=require("obsidian");var ve=async(a,e)=>{try{let t=await fetch(`${d.url}v1/models`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch models");return(await t.json()).data.filter(s=>s.id.includes("gpt")&&!s.id.includes("audio")&&!s.id.includes("realtime")&&!s.id.includes("instruct")&&!s.id.includes("chatgpt")).sort((s,o)=>s.id<o.id?1:s.id>o.id?-1:0).map(s=>s.id)}catch(t){return console.error("Error fetching models:",t),[]}},B=class{constructor(e){this.streamManager=e;this.inferTitleFromMessages=async(e,t,r)=>{try{if(t.length<2)return new f.Notice("Not enough messages to infer title. Minimum 2 messages."),"";let n=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon, back slash or forward slash. Just return the title. Write the title in ${r.inferTitleLanguage}. 
Messages:${m}${JSON.stringify(t)}`,s={...d,...r};return await this.callNonStreamingAPI(r.apiKey,[{role:g,content:n}],s)}catch(n){throw new f.Notice("[ChatGPT MD] Error inferring title from messages"),new Error("[ChatGPT MD] Error inferring title from messages"+n)}}}async callAIAPI(e,t={},r,n,s,o){let i={...d,...t};return t.stream&&n?this.callStreamingAPI(o,e,i,n,r,s):this.callNonStreamingAPI(o,e,i)}async inferTitle(e,t,r,n){if(!e.file)throw new Error("No active file found");console.log("[ChatGPT MD] auto inferring title from messages");let s=await this.inferTitleFromMessages(t.apiKey,r,t);s?(console.log(`[ChatGPT MD] automatically inferred title: ${s}. Changing file name...`),await n.writeInferredTitle(e,s)):new f.Notice("[ChatGPT MD] Could not infer title",5e3)}handleAPIError(e,t,r){throw e instanceof Object?e.error?(new f.Notice(`${r} :: ${e.error.message}`),new Error(JSON.stringify(e.error))):t.url!==d.url?(new f.Notice(`${r} calling specified url: ${t.url}`),new Error(`${r} calling specified url: ${t.url}`)):(new f.Notice(`${r} :: ${JSON.stringify(e)}`),new Error(JSON.stringify(e))):(new f.Notice(`${r} calling ${t.model}, see console for details`),new Error(`${r} see error: ${e}`))}createPayload(e,t){return{model:e.model,messages:t,max_completion_tokens:e.max_tokens,temperature:e.temperature,top_p:e.top_p,presence_penalty:e.presence_penalty,frequency_penalty:e.frequency_penalty,stream:e.stream,stop:e.stop,n:e.n}}async callStreamingAPI(e,t,r,n,s,o){try{let i=this.createPayload(r,t);return{fullstr:await this.streamManager.stream(n,`${r.url}v1/chat/completions`,i,{"Content-Type":"application/json",Authorization:`Bearer ${e}`},r.aiService,o,s),mode:"streaming"}}catch(i){return this.handleAPIError(i,r,"[ChatGPT MD] Stream = True Error"),{fullstr:`${H}${m}${i}`,mode:"streaming"}}}async callNonStreamingAPI(e,t,r){try{console.log('[ChatGPT MD] "no stream"',r),r.stream=!1;let n=this.createPayload(r,t),o=(await(0,f.requestUrl)({url:`${r.url}v1/chat/completions`,method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify(n),throw:!1})).json;if(o!=null&&o.error)throw new f.Notice(`[ChatGPT MD] Stream = False Error :: ${o.error.message}`),new Error(JSON.stringify(o.error));return o.choices[0].message.content}catch(n){this.handleAPIError(n,r,"[ChatGPT MD] Error")}}},d={aiService:u,frequency_penalty:.5,max_tokens:300,model:"gpt-4o-mini",n:1,presence_penalty:.5,stop:null,stream:!0,system_commands:null,tags:[],temperature:.3,title:"Untitled",top_p:1,url:"https://api.openai.com/"};var K=`---
system_commands: ['I am a helpful assistant.']
temperature: ${d.temperature}
top_p: ${d.top_p}
max_tokens: ${d.max_tokens}
presence_penalty: ${d.presence_penalty}
frequency_penalty: ${d.frequency_penalty}
stream: ${d.stream}
stop: ${d.stop}
n: ${d.n}
model: ${d.model}
---`,Re={apiKey:"default",defaultChatFrontmatter:K,stream:!0,chatTemplateFolder:"ChatGPT_MD/templates",chatFolder:"ChatGPT_MD/chats",generateAtCursor:!1,autoInferTitle:!1,dateFormat:D,headingLevel:0,inferTitleLanguage:"English"};var W=class extends p.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Settings for ChatGPT MD: Keep tokens in mind! You can see if your text is longer than the token limit (4096) here:"}),e.createEl("a",{text:"https://platform.openai.com/tokenizer",href:"https://platform.openai.com/tokenizer"}),new p.Setting(e).setName("OpenAI API Key").setDesc("API Key for OpenAI").addText(t=>t.setPlaceholder("some-api-key").setValue(this.plugin.settings.apiKey).onChange(async r=>{this.plugin.settings.apiKey=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Default Chat Frontmatter").setDesc("Default frontmatter for new chat files. You can change/use all of the settings exposed by the OpenAI API here: https://platform.openai.com/docs/api-reference/chat/create").addTextArea(t=>t.setPlaceholder(K).setValue(this.plugin.settings.defaultChatFrontmatter||K).onChange(async r=>{this.plugin.settings.defaultChatFrontmatter=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Stream").setDesc("Stream responses from OpenAI").addToggle(t=>t.setValue(this.plugin.settings.stream).onChange(async r=>{this.plugin.settings.stream=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Chat Folder").setDesc("Path to folder for chat files").addText(t=>t.setValue(this.plugin.settings.chatFolder).onChange(async r=>{this.plugin.settings.chatFolder=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Chat Template Folder").setDesc("Path to folder for chat file templates").addText(t=>t.setPlaceholder("chat-templates").setValue(this.plugin.settings.chatTemplateFolder).onChange(async r=>{this.plugin.settings.chatTemplateFolder=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Generate at Cursor").setDesc("Generate text at cursor instead of end of file").addToggle(t=>t.setValue(this.plugin.settings.generateAtCursor).onChange(async r=>{this.plugin.settings.generateAtCursor=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Automatically Infer Title").setDesc("Automatically infer title after 4 messages have been exchanged").addToggle(t=>t.setValue(this.plugin.settings.autoInferTitle).onChange(async r=>{this.plugin.settings.autoInferTitle=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Date Format").setDesc("Date format for chat files. Valid date blocks are: YYYY, MM, DD, hh, mm, ss").addText(t=>t.setPlaceholder(D).setValue(this.plugin.settings.dateFormat).onChange(async r=>{this.plugin.settings.dateFormat=r,await this.plugin.saveSettings()})),new p.Setting(e).setName("Heading Level").setDesc(`Heading level for messages (example for heading level 2: '## ${M}${g}'). Valid heading levels are 0, 1, 2, 3, 4, 5, 6`).addText(t=>t.setValue(this.plugin.settings.headingLevel.toString()).onChange(async r=>{this.plugin.settings.headingLevel=parseInt(r),await this.plugin.saveSettings()})),new p.Setting(e).setName("Infer title language").setDesc("Language to use for title inference.").addDropdown(t=>{t.addOptions({English:"English",Japanese:"Japanese",Spanish:"Spanish",French:"French",German:"German",Chinese:"Chinese",Korean:"Korean",Italian:"Italian",Russian:"Russian"}),t.setValue(this.plugin.settings.inferTitleLanguage),t.onChange(async r=>{this.plugin.settings.inferTitleLanguage=r,await this.plugin.saveSettings()})})}};var C=require("obsidian");var L=require("obsidian"),j=class extends L.Modal{constructor(e,t,r){super(e),this.folderName=t,this.folderPath=r,this.result=!1,this.modalPromise=new Promise(n=>{this.resolveModalPromise=n})}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:`[ChatGPT MD] No ${this.folderName} folder found.`}),e.createEl("p",{text:`If you choose "Yes, Create", the plugin will automatically create a folder at: ${this.folderPath}. You can change this path in the plugin settings.`}),new L.Setting(e).addButton(t=>t.setButtonText("Yes, Create Folder").setTooltip("Create folder").setCta().onClick(()=>{this.result=!0,this.resolveModalPromise(this.result),this.close()})),new L.Setting(e).addButton(t=>t.setButtonText("No, I'll create it myself").setTooltip("Cancel").setCta().onClick(()=>{this.result=!1,this.resolveModalPromise(this.result),this.close()}))}waitForModalValue(){return this.modalPromise}onClose(){let{contentEl:e}=this;e.empty()}};var Fe=async(a,e,t)=>{let r=new j(a,e,t);r.open();let n=await r.waitForModalValue();return n?(console.log("[ChatGPT MD] Creating folder"),await a.vault.createFolder(t)):console.log("[ChatGPT MD] Not creating folder"),n};var A=require("obsidian"),J=class extends A.SuggestModal{constructor(e,t,r){super(e),this.settings=t,this.titleDate=r}getFilesInChatFolder(){let e=this.app.vault.getAbstractFileByPath(this.settings.chatTemplateFolder);if(e!=null)return e.children;throw new A.Notice(`Error getting folder: ${this.settings.chatTemplateFolder}`),new Error(`Error getting folder: ${this.settings.chatTemplateFolder}`)}getSuggestions(e){let t=this.getFilesInChatFolder();return e==""?t.map(r=>({title:r.basename,file:r})):t.filter(r=>r.basename.toLowerCase().includes(e.toLowerCase())).map(r=>({title:r.basename,file:r}))}renderSuggestion(e,t){t.createEl("div",{text:e.title})}async onChooseSuggestion(e,t){new A.Notice(`Selected ${e.title}`);let r=await this.app.vault.read(e.file),n=`${this.titleDate} ${e.title}`,s=(0,A.normalizePath)(`${this.settings.chatFolder}/${n}.md`),o=1;for(;await this.app.vault.adapter.exists(s);)s=(0,A.normalizePath)(`${this.settings.chatFolder}/${n} (${o}).md`),o++;try{let i=await this.app.vault.create(s,r);await this.app.workspace.openLinkText(i.basename,"",!0)}catch(i){console.error(i)}}};var _=require("obsidian");var $={model:"gemma2",aiService:T,url:"http://localhost:11434",stream:!0},Le=async()=>{try{let a=await fetch(`${$.url}/api/tags`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!a.ok)throw new Error("Failed to fetch models");return(await a.json()).models.sort((r,n)=>r.name<n.name?1:r.name>n.name?-1:0).map(r=>`local@${r.name.replace(":latest","")}`)}catch(a){return console.error("Error fetching models:",a),[]}},z=class{constructor(e){this.streamManager=e;this.inferTitleFromMessages=async(e,t)=>{try{if(e.length<2)return new _.Notice("Not enough messages to infer title. Minimum 2 messages."),"";let r=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon, back slash or forward slash. Just return the title. Write the title in ${t.inferTitleLanguage}. 
Messages:${m}${JSON.stringify(e)}`,n={...$,...t};return await this.callNonStreamingAPI([{role:g,content:r}],n)}catch(r){throw new _.Notice("[ChatGPT MD] Error inferring title from messages"),new Error("[ChatGPT MD] Error inferring title from messages"+r)}}}async callAIAPI(e,t={},r,n,s){let o={...$,...t};return t.stream?this.callStreamingAPI(e,o,r,n,s):this.callNonStreamingAPI(e,o)}async inferTitle(e,t,r,n){if(!e.file)throw new Error("No active file found");console.log("[ChatGPT MD] auto inferring title from messages");let s=await this.inferTitleFromMessages(r,t);s?(console.log(`[ChatGPT MD] automatically inferred title: ${s}. Changing file name...`),await n.writeInferredTitle(e,s)):new _.Notice("[ChatGPT MD] Could not infer title",5e3)}async callStreamingAPI(e,t,r="",n,s=!1){try{return{fullstr:await this.streamManager.stream(n,`${t.url}/api/chat`,{model:t.model,messages:e,stream:!0},{"Content-Type":"application/json"},t.aiService,s,r),mode:"streaming"}}catch(o){throw this.handleError(o,t.model),new Error(`Issue calling custom API with streaming enabled:${o}`)}}async callNonStreamingAPI(e,t){try{console.log('[ChatGPT MD] "no stream"',t),t.stream=!1;let r=await(0,_.requestUrl)({url:`${t.url}/api/chat`,method:"POST",headers:{"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify({model:t.model,messages:e,stream:!1})}),n=JSON.parse(r.text);if(n.error)throw new Error(JSON.stringify(n.error));return n.message.content}catch(r){throw this.handleError(r,t.model),new Error(`Issue calling custom API with non-streaming enabled:${r}`)}}handleError(e,t){e instanceof Object&&e.error?new _.Notice(`[Custom API] Error :: ${e.error.message}`):new _.Notice(`Issue calling ${t}, see console for more details`)}};var $e=require("obsidian");var be=async(a,e)=>{try{let t=await Le(),r=await ve(a,e);return[...t,...r]}catch(t){throw new $e.Notice("Error fetching models: "+t),console.error("Error fetching models:",t),t}},q=(a,e)=>{switch(e){case u:return new B(a);case T:return new z(a);default:throw new Error("Unsupported API type")}},Ge=(a,e)=>{let t=(a!=null?a:"").trim().toLowerCase(),r=(e!=null?e:"").trim().toLowerCase();if(r.includes("@")){let n=r.split("@")[0];if(["local",T].includes(n))return T;if(n===u)return u}return t.startsWith("http://localhost")||t.startsWith("http://127.0.0.1")?T:u};var X=class{constructor(e){this.app=e;this.getLinkedNoteContent=async e=>{try{let t=this.app.metadataCache.getFirstLinkpathDest(e,"");return t?await this.app.vault.read(t):null}catch(t){return console.error(`Error reading linked note: ${e}`,t),null}}}async writeInferredTitle(e,t){var o,i;let r=e.file;if(!r)throw new Error("No file is currently open");let n=(i=(o=r.parent)==null?void 0:o.path)!=null?i:"/",s=`${n}/${t}.md`;for(let l=1;await this.app.vault.adapter.exists(s);l++)s=`${n}/${t} (${l}).md`;try{await this.app.fileManager.renameFile(r,s)}catch(l){throw new C.Notice("[ChatGPT MD] Error writing inferred title to editor"),console.log("[ChatGPT MD] Error writing inferred title to editor",l),l}}async ensureFolderExists(e,t){return!await this.app.vault.adapter.exists(e)&&!await Fe(this.app,t,e)?(new C.Notice(`[ChatGPT MD] No ${t} found. One must be created to use the plugin. Set one in settings and make sure it exists.`),!1):!0}addHorizontalRule(e,t,r){let n=`${m}<hr class="${ne}">${m}${se(r)}${M}${t}${m}`,s=e.getCursor();e.replaceRange(n,s),e.setCursor(s.line+n.split(`
`).length-1,0)}async createNewChatWithHighlightedText(e,t){try{let r=e.getSelection();if(!t.chatFolder||t.chatFolder.trim()===""){new C.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.ensureFolderExists(t.chatFolder,te))return;let s=`${this.getDate(new Date,t.dateFormat)}.md`,o=`${t.chatFolder}/${s}`,i=await this.app.vault.create(o,r);await this.app.workspace.openLinkText(i.basename,"",!0,{state:{mode:"source"}});let l=this.app.workspace.getActiveViewOfType(C.MarkdownView);if(!l){new C.Notice("No active markdown editor found.");return}l.editor.focus(),this.moveCursorToEnd(l.editor)}catch(r){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",r),new C.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}appendMessage(e,t,r){let n=se(r),s=x(n,I),o=x(n,g);e.replaceRange(`${s}${t}${o}`,e.getCursor())}clearChat(e){let r=e.getValue().match(w);if(r!=null&&r.length){let[n]=r;e.setValue(n),e.setCursor({line:e.lastLine()+1,ch:0})}else e.setValue("")}moveCursorToEnd(e){try{let r={line:e.lastLine()+1,ch:0};e.setCursor(r)}catch(t){throw new Error("Error moving cursor to end of file"+t)}}findLinksInMessage(e){let t=[{regex:Ee,fullMatchIndex:0,titleIndex:1},{regex:Ce,fullMatchIndex:0,titleIndex:2}],r=[],n=new Set;for(let{regex:s,fullMatchIndex:o,titleIndex:i}of t)for(let l of e.matchAll(s)){let c=l[o],h=l[i];h&&!n.has(h)&&(r.push({link:c,title:h}),n.add(h))}return r}cleanMessagesFromNote(e){return De(xe(e.getValue())).map(Oe)}async getMessagesFromEditor(e,t){let r=this.cleanMessagesFromNote(e);r=await Promise.all(r.map(async o=>{let i=this.findLinksInMessage(o);for(let l of i)try{let c=await this.getLinkedNoteContent(l.title);if(c){let h=new RegExp(`${m}${R}${m}#+ ${M}(?:${g}|${I}).*$`,"gm");c=c==null?void 0:c.replace(h,"").replace(w,""),o=o.replace(new RegExp(Ne(l.link),"g"),`${m}${l.title}${m}${c}${m}`)}else console.warn(`Error fetching linked note content for: ${l.link}`)}catch(c){console.error(c)}return o}));let n=r.map(Ie),s=this.getFrontmatter(null,t,this.app);if(s.system_commands){let o=s.aiService===u?V:we;s.system_commands.forEach(i=>n.unshift({role:o,content:i}))}return{messages:r,messagesWithRole:n}}async createNewChatFromTemplate(e,t){let{chatFolder:r,chatTemplateFolder:n}=e;if(!r||!r.trim()){new C.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(await this.ensureFolderExists(r,te)){if(!n||!n.trim()){new C.Notice("[ChatGPT MD] No chat template folder value found. Please set one in settings.");return}await this.ensureFolderExists(n,fe)&&new J(this.app,e,t).open()}}getDate(e,t=D){let r=e.getFullYear(),n=e.getMonth()+1,s=e.getDate(),o=e.getHours(),i=e.getMinutes(),l=e.getSeconds(),c=n.toString().padStart(2,"0"),h=s.toString().padStart(2,"0"),O=o.toString().padStart(2,"0"),y=i.toString().padStart(2,"0"),P=l.toString().padStart(2,"0");return t.replace("YYYY",r.toString()).replace("MM",c).replace("DD",h).replace("hh",O).replace("mm",y).replace("ss",P)}getFrontmatter(e,t,r){var h,O,y,P,G;let n=(e==null?void 0:e.file)||r.workspace.getActiveFile();if(!n)throw new Error("No active file found");let s=Pe(t.defaultChatFrontmatter),o=((h=r.metadataCache.getFileCache(n))==null?void 0:h.frontmatter)||{},i={...s,...o};o.url||delete i.url;let l=Ge(i.url,i.model),c=l==u?d:$;return{...c,...i,model:i.model.split("@")[1]||i.model,aiService:l,stream:(y=(O=i.stream)!=null?O:t.stream)!=null?y:c.stream,title:(G=(P=e==null?void 0:e.file)==null?void 0:P.basename)!=null?G:c.title}}getHeadingPrefix(e){return e===Ae?"":e>re?"#".repeat(re)+" ":"#".repeat(e)+" "}async processResponse(e,t,r){if(t.mode==="streaming"){let n=x(this.getHeadingPrefix(r.headingLevel),g);e.replaceRange(n,e.getCursor());let s=e.getCursor(),o={line:s.line,ch:s.ch+n.length};e.setCursor(o)}else{let n=t;U(n)&&(n=n+"\n```"),this.appendMessage(e,n,r.headingLevel)}}setModel(e,t){let r=e.getValue(),n=r.match(w),s;if(n){let i=n[0].replace(/---/g,""),l=/^model:\s*(.*)$/m;l.test(i)?i=i.replace(l,`model: ${t}`):i+=`
model: ${t}`,s=r.replace(w,`---${i}---`)}else s=`---
model: ${t}
---
${r}`;e.setValue(s)}};var Z=require("obsidian"),b=class extends Z.SuggestModal{constructor(e,t,r,n=[]){super(e),this.modelNames=n,this.editor=t,this.editorService=r,this.modelNames.length>0?this.setPlaceholder("Select Large Language Model"):this.setPlaceholder("Loading available models...")}getSuggestions(e){return this.modelNames.filter(t=>t.toLowerCase().includes(e.toLowerCase()))}renderSuggestion(e,t){t.createEl("div",{text:e})}onChooseSuggestion(e,t){this.modelNames.indexOf(e)===-1||this.modelNames.length===0||(new Z.Notice(`Selected model: ${e}`),this.editorService.setModel(this.editor,e))}};var Q=class extends E.Plugin{async onload(){this.statusBarItemEl=this.addStatusBarItem(),this.streamManager=new Y,this.editorService=new X(this.app),this.settings=await Object.assign({},Re,await this.loadData()),this.addCommand({id:ie,name:"Chat",icon:"message-circle",editorCallback:async(e,t)=>{var n;let r=this.editorService.getFrontmatter(t,this.settings,this.app);this.aiService=q(this.streamManager,r.aiService);try{let{messagesWithRole:s,messages:o}=await this.editorService.getMessagesFromEditor(e,this.settings);this.settings.generateAtCursor||this.editorService.moveCursorToEnd(e),E.Platform.isMobile?new E.Notice(`[ChatGPT MD] Calling ${r.model}`):this.updateStatusBar(`Calling ${r.model}`);let i=await this.aiService.callAIAPI(s,r,this.editorService.getHeadingPrefix(this.settings.headingLevel),e,this.settings.generateAtCursor,this.settings.apiKey);await this.editorService.processResponse(e,i,this.settings),this.settings.autoInferTitle&&ye((n=t==null?void 0:t.file)==null?void 0:n.basename,this.settings.dateFormat)&&s.length>_e&&await this.aiService.inferTitle(t,r,o,this.editorService)}catch(s){E.Platform.isMobile&&new E.Notice(`[ChatGPT MD] Calling ${r.model}. `+s,9e3),console.log(s)}this.updateStatusBar("")}}),this.addCommand({id:"select-model-command",name:"Select Model",icon:"list",editorCallback:async(e,t)=>{let r=new b(this.app,e,this.editorService);r.open();let n=this.editorService.getFrontmatter(t,this.settings,this.app);this.aiService=q(this.streamManager,n.aiService);try{let s=await be(n.url,this.settings.apiKey);r.close(),new b(this.app,e,this.editorService,s).open()}catch(s){r.close(),new E.Notice("Could not find any models"),console.error(s)}}}),this.addCommand({id:oe,name:"Add divider",icon:"minus",editorCallback:(e,t)=>{this.editorService.addHorizontalRule(e,g,this.settings.headingLevel)}}),this.addCommand({id:ae,name:"Add comment block",icon:"comment",editorCallback:(e,t)=>{let r=e.getCursor(),n=r.line,s=r.ch,o=`${Te}${m}${Me}`;e.replaceRange(o,r);let i={line:n+1,ch:s};e.setCursor(i)}}),this.addCommand({id:le,name:"Stop streaming",icon:"octagon",callback:()=>{this.streamManager.stopStreaming()}}),this.addCommand({id:me,name:"Infer title",icon:"subtitles",editorCallback:async(e,t)=>{let r=this.editorService.getFrontmatter(t,this.settings,this.app);this.aiService=q(this.streamManager,r.aiService),this.updateStatusBar(`Calling ${r.model}`);let{messages:n}=await this.editorService.getMessagesFromEditor(e,this.settings);await this.aiService.inferTitle(t,this.settings,n,this.editorService),this.updateStatusBar("")}}),this.addCommand({id:ce,name:"Create new chat with highlighted text",icon:"highlighter",editorCallback:async(e,t)=>{try{await this.editorService.createNewChatWithHighlightedText(e,this.settings)}catch(r){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",r),new E.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}}),this.addCommand({id:he,name:"Create new chat from template",icon:"layout-template",callback:async()=>{this.settings.dateFormat&&await this.editorService.createNewChatFromTemplate(this.settings,this.editorService.getDate(new Date,this.settings.dateFormat)),new E.Notice("date format cannot be empty in your ChatGPT MD settings. You can choose something like YYYYMMDDhhmmss")}}),this.addCommand({id:de,name:"Clear chat (except frontmatter)",icon:"trash",editorCallback:async(e,t)=>{this.editorService.clearChat(e)}}),this.addSettingTab(new W(this.app,this))}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(e){this.statusBarItemEl.setText(`[ChatGPT MD] ${e}`)}};
